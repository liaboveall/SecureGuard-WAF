#!/bin/bash

# CVE-2021-22205 (GitLab DjVu File Upload RCE) WAF Protection Script
# Description: GitLab DjVu file upload leading to Remote Code Execution
# CVE: CVE-2021-22205
# Severity: Critical (CVSS 10.0)

# Load configuration and common utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../config/global.conf"
source "$SCRIPT_DIR/../utils/common.sh"

# CVE-specific configuration
CVE_NAME="CVE-2021-22205"
CONTAINER_NAME="${GITLAB_CONTAINER_NAME}"
WAF_CONTAINER_NAME="${GITLAB_WAF_CONTAINER_NAME}"
APP_PORT="${GITLAB_APP_PORT}"
WAF_PORT="${GITLAB_WAF_PORT}"
NETWORK_NAME="${GITLAB_NETWORK_NAME}"
PROJECT_DIR="${CVE_NAME,,}_protection"

# Initialize
init_script "$CVE_NAME" "$PROJECT_DIR"

# Main menu
show_main_menu() {
    clear
    show_banner "GitLab DjVu RCE Protection (CVE-2021-22205)"
    
    echo -e "${CYAN}选择操作模式:${NC}"
    echo -e "${WHITE}1.${NC} 生成防护脚本"
    echo -e "${WHITE}2.${NC} 部署 WAF 防护"
    echo -e "${WHITE}3.${NC} 生成测试脚本"
    echo -e "${WHITE}4.${NC} 监控 WAF 状态"
    echo -e "${WHITE}5.${NC} 查看WAF日志"
    echo -e "${WHITE}6.${NC} 生成清理脚本"
    echo -e "${WHITE}7.${NC} 清理环境"
    echo -e "${WHITE}0.${NC} 退出"
    echo ""
}

# Generate deployment script
generate_deployment_script() {
    local deploy_script="$PROJECT_DIR/deploy.sh"
    
    log_info "生成部署脚本: $deploy_script"
    
    cat > "$deploy_script" << 'EOF'
#!/bin/bash

# GitLab CVE-2021-22205 WAF Protection Deployment Script
# Auto-generated deployment script

source ../utils/common.sh

# Configuration
CVE_NAME="CVE-2021-22205"
CONTAINER_NAME="gitlab_vulnerable_cve22205"
WAF_CONTAINER_NAME="gitlab_waf_cve22205"
APP_PORT=80
WAF_PORT=8085
NETWORK_NAME="gitlab_cve22205_net"

deploy_protection() {
    show_banner "Deploying GitLab DjVu RCE Protection"
    
    # Create directory structure
    log_info "创建目录结构..."
    mkdir -p waf_config/rules waf_logs templates
    
    # Generate docker-compose.yml
    log_info "生成 Docker Compose 配置..."
    cat > docker-compose.yml << COMPOSE_EOF
version: '3.8'

services:
  gitlab_app:
    image: vulfocus/gitlab-cve_2021_22205:latest
    container_name: ${CONTAINER_NAME}
    networks:
      - ${NETWORK_NAME}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/users/sign_in"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s

  waf:
    image: owasp/modsecurity:apache
    container_name: ${WAF_CONTAINER_NAME}
    ports:
      - "${WAF_PORT}:80"
    networks:
      - ${NETWORK_NAME}
    environment:
      - BACKEND=http://gitlab_app:${APP_PORT}
      - LOGLEVEL=info
      - PROXY_ERROR_OVERRIDE=On
      - PROXY_TIMEOUT=300
    volumes:
      - ./waf_config/modsecurity.conf:/etc/modsecurity/modsecurity.conf:ro
      - ./waf_config/rules:/etc/modsecurity.d/rules:ro
      - ./waf_logs:/var/log/apache2
      - ./waf_config/htaccess.conf:/etc/apache2/conf-available/security.conf:ro
    depends_on:
      gitlab_app:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  ${NETWORK_NAME}:
    driver: bridge

COMPOSE_EOF

    # Generate ModSecurity configuration
    log_info "生成 ModSecurity 配置..."
    cat > waf_config/modsecurity.conf << MODSEC_EOF
# ModSecurity Configuration for GitLab CVE-2021-22205 Protection
SecRuleEngine On
SecRequestBodyAccess On
SecRequestBodyLimit 52428800
SecRequestBodyNoFilesLimit 1048576
SecRequestBodyInMemoryLimit 131072
SecRequestBodyLimitAction Reject
SecPcreMatchLimit 100000
SecPcreMatchLimitRecursion 100000

# Audit logging
SecAuditEngine RelevantOnly
SecAuditLogType Serial
SecAuditLog /var/log/apache2/modsec_audit.log
SecAuditLogFormat JSON
SecAuditLogParts ABIJDEFHZ
SecAuditLogRelevantStatus "^(?:5|4(?!04))"

# File upload handling
SecTmpDir /tmp/
SecUploadDir /tmp/
SecUploadKeepFiles Off
SecUploadFileLimit 10
SecUploadFileLimitAction Reject

# Debug logging
SecDebugLog /var/log/apache2/modsec_debug.log
SecDebugLogLevel 3

# Response headers
SecServerSignature "Apache/2.4.41"
SecComponentSignature "ModSecurity for Apache/2.9.3"

# Include custom rules
Include /etc/modsecurity.d/rules/cve-2021-22205-rules.conf
Include /etc/modsecurity.d/rules/file-upload-protection.conf
Include /etc/modsecurity.d/rules/rce-protection.conf

MODSEC_EOF

    # Generate DjVu-specific protection rules
    log_info "生成 DjVu 攻击防护规则..."
    cat > waf_config/rules/cve-2021-22205-rules.conf << RULES_EOF
# CVE-2021-22205 GitLab DjVu RCE Protection Rules

# Rule 2210: Block DjVu files with suspicious headers
SecRule FILES_TMPNAMES "@inspectFile /tmp/detect_djvu.lua" \\
    "id:2210,\\
    phase:2,\\
    block,\\
    log,\\
    msg:'CVE-2021-22205: Malicious DjVu file detected',\\
    logdata:'File: %{MATCHED_VAR_NAME}',\\
    tag:'cve-2021-22205',\\
    tag:'file-upload',\\
    tag:'rce',\\
    severity:'CRITICAL'"

# Rule 2211: Detect DjVu magic bytes with suspicious content
SecRule REQUEST_BODY "@rx (?:AT&TFORM|DjVu)[\\s\\S]{0,1000}(?:qx|\\x60|system|exec|perl\\s+-e|sh\\s+-c|bash\\s+-c)" \\
    "id:2211,\\
    phase:2,\\
    block,\\
    log,\\
    msg:'CVE-2021-22205: DjVu file with embedded RCE payload',\\
    logdata:'Suspicious content detected in uploaded file',\\
    tag:'cve-2021-22205',\\
    tag:'djvu-rce',\\
    severity:'CRITICAL'"

# Rule 2212: Block files with DjVu structure and Perl commands
SecRule REQUEST_BODY "@rx DJVIANTa[^\\n\\r]*?\\s\\.\\s*['\"]?\\s*(?:qx|\\x60|system|exec)" \\
    "id:2212,\\
    phase:2,\\
    block,\\
    log,\\
    msg:'CVE-2021-22205: DjVu file with Perl command injection',\\
    logdata:'Perl command injection pattern detected',\\
    tag:'cve-2021-22205',\\
    tag:'perl-injection',\\
    severity:'CRITICAL'"

# Rule 2213: Enhanced file upload validation for image files
SecRule FILES_NAMES "@rx \\.(jpe?g|png|gif|tiff?|djvu)$" \\
    "chain,\\
    id:2213,\\
    phase:2,\\
    block,\\
    log,\\
    msg:'CVE-2021-22205: Suspicious image file upload',\\
    tag:'cve-2021-22205'"
    SecRule REQUEST_BODY "@rx (?:AT&TFORM|DjVu|DJVM)" \\
        "chain,\\
        msg:'DjVu content in image file'"
        SecRule REQUEST_BODY "@rx (?:whoami|id|uname|cat\\s+/etc/passwd|nc\\s|perl\\s+-e|sh\\s+-c|bash\\s+-c|wget\\s|curl\\s|\\x60|system\\(|qx\\{)" \\
            "msg:'RCE payload in DjVu file'"

# Rule 2214: Block GitLab-specific vulnerable endpoints
SecRule REQUEST_URI "@rx /uploads/user/" \\
    "chain,\\
    id:2214,\\
    phase:1,\\
    block,\\
    log,\\
    msg:'CVE-2021-22205: Blocked upload to vulnerable GitLab endpoint',\\
    tag:'cve-2021-22205'"
    SecRule REQUEST_METHOD "@streq POST"

# Rule 2215: Rate limiting for file uploads
SecAction "id:2215,\\
    phase:1,\\
    nolog,\\
    initcol:ip=%{REMOTE_ADDR},\\
    setvar:ip.upload_counter=+1,\\
    expirevar:ip.upload_counter=300"

SecRule IP:UPLOAD_COUNTER "@gt 10" \\
    "id:2216,\\
    phase:1,\\
    block,\\
    log,\\
    msg:'CVE-2021-22205: File upload rate limit exceeded',\\
    logdata:'Upload attempts: %{ip.upload_counter}',\\
    tag:'rate-limiting'"

RULES_EOF

    # Generate file upload protection rules
    cat > waf_config/rules/file-upload-protection.conf << UPLOAD_EOF
# Enhanced File Upload Protection

# Rule 2220: File size validation
SecRule FILES_SIZES "@gt 10485760" \\
    "id:2220,\\
    phase:2,\\
    block,\\
    log,\\
    msg:'File upload: File too large',\\
    tag:'file-upload-protection'"

# Rule 2221: File extension whitelist
SecRule FILES_NAMES "!@rx \\.(jpg|jpeg|png|gif|pdf|txt|doc|docx|xls|xlsx|ppt|pptx)$" \\
    "id:2221,\\
    phase:2,\\
    block,\\
    log,\\
    msg:'File upload: Dangerous file extension',\\
    logdata:'Filename: %{MATCHED_VAR}',\\
    tag:'file-upload-protection'"

# Rule 2222: MIME type validation
SecRule FILES_TMPNAMES "@inspectFile /tmp/validate_mime.lua" \\
    "id:2222,\\
    phase:2,\\
    block,\\
    log,\\
    msg:'File upload: MIME type mismatch',\\
    tag:'file-upload-protection'"

UPLOAD_EOF

    # Generate RCE protection rules
    cat > waf_config/rules/rce-protection.conf << RCE_EOF
# Remote Code Execution Protection

# Rule 2230: Command injection patterns
SecRule ARGS "@rx (?:;|\\||&|\\$\\(|\\`|<|>|\\{|\\})" \\
    "id:2230,\\
    phase:2,\\
    block,\\
    log,\\
    msg:'RCE Protection: Command injection attempt',\\
    logdata:'Pattern: %{MATCHED_VAR}',\\
    tag:'rce-protection',\\
    transform:'lowercase'"

# Rule 2231: System command detection
SecRule ARGS "@rx (?:whoami|id|uname|cat|ls|ps|netstat|ifconfig|ping|wget|curl|nc|telnet)" \\
    "id:2231,\\
    phase:2,\\
    block,\\
    log,\\
    msg:'RCE Protection: System command detected',\\
    logdata:'Command: %{MATCHED_VAR}',\\
    tag:'rce-protection',\\
    transform:'lowercase'"

# Rule 2232: Script interpreter detection
SecRule ARGS "@rx (?:perl|python|php|ruby|bash|sh|cmd|powershell)" \\
    "id:2232,\\
    phase:2,\\
    block,\\
    log,\\
    msg:'RCE Protection: Script interpreter detected',\\
    logdata:'Interpreter: %{MATCHED_VAR}',\\
    tag:'rce-protection',\\
    transform:'lowercase'"

RCE_EOF

    # Generate Apache security configuration
    cat > waf_config/htaccess.conf << APACHE_EOF
# Apache Security Configuration
ServerTokens Prod
ServerSignature Off

# Security headers
Header always set X-Content-Type-Options nosniff
Header always set X-Frame-Options DENY
Header always set X-XSS-Protection "1; mode=block"
Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains"
Header always set Content-Security-Policy "default-src 'self'"

# Hide Apache version
ServerName "Security Server"

APACHE_EOF

    # Create log files
    log_info "初始化日志文件..."
    touch waf_logs/access.log waf_logs/error.log waf_logs/modsec_audit.log waf_logs/modsec_debug.log

    # Generate monitoring dashboard
    generate_monitoring_dashboard

    # Deploy containers
    log_info "启动 Docker 容器..."
    docker_compose_up

    if [ $? -eq 0 ]; then
        log_success "GitLab CVE-2021-22205 防护部署成功!"
        echo -e "${CYAN}访问信息:${NC}"
        echo -e "  WAF 地址: http://localhost:${WAF_PORT}"
        echo -e "  监控面板: file://$(pwd)/monitoring/dashboard.html"
        echo -e "${YELLOW}注意: GitLab 首次启动需要几分钟时间${NC}"
    else
        log_error "部署失败，请检查 Docker 环境"
        return 1
    fi
}

generate_monitoring_dashboard() {
    mkdir -p monitoring
    cat > monitoring/dashboard.html << HTML_EOF
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GitLab CVE-2021-22205 WAF 监控面板</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; }
        .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
        .card { background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .status-good { color: #27ae60; }
        .status-warning { color: #f39c12; }
        .status-critical { color: #e74c3c; }
        .metric { display: flex; justify-content: space-between; align-items: center; margin: 10px 0; }
        .log-container { max-height: 300px; overflow-y: auto; background: #2c3e50; color: #ecf0f1; padding: 15px; border-radius: 5px; font-family: monospace; }
        button { background: #3498db; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin: 5px; }
        button:hover { background: #2980b9; }
        .refresh-btn { float: right; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🛡️ GitLab CVE-2021-22205 WAF 防护监控</h1>
            <p>实时监控 GitLab DjVu 文件上传 RCE 防护状态</p>
            <button class="refresh-btn" onclick="refreshAll()">🔄 刷新数据</button>
        </div>

        <div class="grid">
            <div class="card">
                <h3>🚀 服务状态</h3>
                <div class="metric">
                    <span>GitLab 应用:</span>
                    <span id="gitlab-status" class="status-good">运行中</span>
                </div>
                <div class="metric">
                    <span>WAF 服务:</span>
                    <span id="waf-status" class="status-good">活跃</span>
                </div>
                <div class="metric">
                    <span>防护规则:</span>
                    <span id="rules-count">6 条规则</span>
                </div>
                <button onclick="checkServices()">检查服务状态</button>
            </div>

            <div class="card">
                <h3>📊 攻击统计</h3>
                <div class="metric">
                    <span>DjVu 攻击阻止:</span>
                    <span id="djvu-blocks" class="status-warning">0</span>
                </div>
                <div class="metric">
                    <span>RCE 尝试阻止:</span>
                    <span id="rce-blocks" class="status-warning">0</span>
                </div>
                <div class="metric">
                    <span>文件上传拦截:</span>
                    <span id="upload-blocks" class="status-warning">0</span>
                </div>
                <div class="metric">
                    <span>总请求数:</span>
                    <span id="total-requests">0</span>
                </div>
            </div>

            <div class="card">
                <h3>🔍 最新日志</h3>
                <div class="log-container" id="recent-logs">
                    <div>等待日志数据...</div>
                </div>
                <button onclick="loadLogs()">刷新日志</button>
                <button onclick="exportLogs()">导出日志</button>
            </div>

            <div class="card">
                <h3>⚙️ 快速操作</h3>
                <button onclick="testWAF()">测试 WAF</button>
                <button onclick="updateRules()">更新规则</button>
                <button onclick="restartWAF()">重启 WAF</button>
                <button onclick="viewFullLogs()">查看完整日志</button>
            </div>
        </div>
    </div>

    <script>
        function refreshAll() {
            checkServices();
            loadLogs();
            updateStats();
        }

        function checkServices() {
            // 模拟检查服务状态
            console.log('检查服务状态...');
            document.getElementById('gitlab-status').textContent = '运行中';
            document.getElementById('waf-status').textContent = '活跃';
        }

        function loadLogs() {
            const logs = [
                '[' + new Date().toLocaleString() + '] ModSecurity: 规则引擎已启动',
                '[' + new Date().toLocaleString() + '] WAF: 监听端口 ${WAF_PORT}',
                '[' + new Date().toLocaleString() + '] 防护: CVE-2021-22205 规则已加载',
            ];
            document.getElementById('recent-logs').innerHTML = logs.map(log => '<div>' + log + '</div>').join('');
        }

        function updateStats() {
            // 模拟更新统计数据
            document.getElementById('djvu-blocks').textContent = Math.floor(Math.random() * 10);
            document.getElementById('rce-blocks').textContent = Math.floor(Math.random() * 5);
            document.getElementById('upload-blocks').textContent = Math.floor(Math.random() * 15);
            document.getElementById('total-requests').textContent = Math.floor(Math.random() * 1000);
        }

        function testWAF() {
            alert('WAF 测试功能 - 请使用测试脚本进行完整测试');
        }

        function updateRules() {
            alert('规则更新功能 - 将重新加载 ModSecurity 规则');
        }

        function restartWAF() {
            if(confirm('确定要重启 WAF 服务吗？')) {
                alert('WAF 服务重启中...');
            }
        }

        function viewFullLogs() {
            window.open('about:blank').document.write('<pre>' + 
                '完整的 WAF 日志将在这里显示...\n' +
                '请使用: docker logs ${WAF_CONTAINER_NAME}\n' +
                '或查看: ./waf_logs/ 目录下的日志文件'
            + '</pre>');
        }

        function exportLogs() {
            alert('日志导出功能 - 日志文件位于 ./waf_logs/ 目录');
        }

        // 初始化
        window.onload = function() {
            loadLogs();
            updateStats();
            setInterval(updateStats, 10000); // 每10秒更新统计
        };
    </script>
</body>
</html>
HTML_EOF
}

# Deploy protection
deploy_protection
EOF

    chmod +x "$deploy_script"
    log_success "部署脚本已生成: $deploy_script"
}

# Generate test script
generate_test_script() {
    local test_script="$PROJECT_DIR/test_cve_2021_22205.sh"
    
    log_info "生成测试脚本: $test_script"
    
    cat > "$test_script" << 'EOF'
#!/bin/bash

# CVE-2021-22205 GitLab DjVu RCE Test Script
# Tests WAF protection against DjVu file upload attacks

source ../utils/common.sh

CVE_NAME="CVE-2021-22205"
WAF_URL="http://localhost:8085"
CONTAINER_NAME="gitlab_waf_cve22205"

test_djvu_protection() {
    show_banner "Testing GitLab CVE-2021-22205 Protection"
    
    local test_results=()
    local total_tests=0
    local passed_tests=0
    
    echo -e "${CYAN}开始 WAF 防护测试...${NC}"
    
    # Test 1: Basic DjVu file upload
    echo -e "\n${YELLOW}测试 1: 基础 DjVu 文件上传检测${NC}"
    total_tests=$((total_tests + 1))
    
    # Create malicious DjVu file
    cat > /tmp/malicious.djvu << DJVU_EOF
AT&TFORM0000DJVM
DJVM
AT&TFORM0000DJVU
Sjbz
BGjp
. qx{whoami}
DJVU_EOF
    
    response=$(curl -s -w "%{http_code}" -F "avatar=@/tmp/malicious.djvu" "$WAF_URL/api/v4/user" -o /dev/null)
    if [ "$response" = "403" ]; then
        echo -e "${GREEN}✓ 基础 DjVu 攻击已被阻止${NC}"
        test_results+=("✓ Test 1: DjVu upload blocked")
        passed_tests=$((passed_tests + 1))
    else
        echo -e "${RED}✗ 基础 DjVu 攻击未被阻止 (HTTP $response)${NC}"
        test_results+=("✗ Test 1: DjVu upload not blocked")
    fi
    
    # Test 2: DjVu with command injection
    echo -e "\n${YELLOW}测试 2: DjVu 命令注入检测${NC}"
    total_tests=$((total_tests + 1))
    
    cat > /tmp/cmd_injection.djvu << DJVU_EOF
DJVIANTa
. 'qx{cat /etc/passwd}'
DJVU_EOF
    
    response=$(curl -s -w "%{http_code}" -F "file=@/tmp/cmd_injection.djvu" "$WAF_URL/uploads/user/" -o /dev/null)
    if [ "$response" = "403" ]; then
        echo -e "${GREEN}✓ DjVu 命令注入已被阻止${NC}"
        test_results+=("✓ Test 2: Command injection blocked")
        passed_tests=$((passed_tests + 1))
    else
        echo -e "${RED}✗ DjVu 命令注入未被阻止 (HTTP $response)${NC}"
        test_results+=("✗ Test 2: Command injection not blocked")
    fi
    
    # Test 3: Image file with DjVu content
    echo -e "\n${YELLOW}测试 3: 伪装图片文件检测${NC}"
    total_tests=$((total_tests + 1))
    
    cat > /tmp/fake_image.jpg << DJVU_EOF
AT&TFORM0000DJVU
DjVu content
qx{id}
DJVU_EOF
    
    response=$(curl -s -w "%{http_code}" -F "image=@/tmp/fake_image.jpg" "$WAF_URL/api/v4/projects/1/uploads" -o /dev/null)
    if [ "$response" = "403" ]; then
        echo -e "${GREEN}✓ 伪装图片文件已被阻止${NC}"
        test_results+=("✓ Test 3: Fake image file blocked")
        passed_tests=$((passed_tests + 1))
    else
        echo -e "${RED}✗ 伪装图片文件未被阻止 (HTTP $response)${NC}"
        test_results+=("✗ Test 3: Fake image file not blocked")
    fi
    
    # Test 4: Rate limiting
    echo -e "\n${YELLOW}测试 4: 上传频率限制${NC}"
    total_tests=$((total_tests + 1))
    
    local blocked=false
    for i in {1..15}; do
        response=$(curl -s -w "%{http_code}" -F "file=@/tmp/malicious.djvu" "$WAF_URL/uploads/user/" -o /dev/null)
        if [ "$response" = "403" ] && [ $i -gt 10 ]; then
            blocked=true
            break
        fi
        sleep 0.1
    done
    
    if [ "$blocked" = true ]; then
        echo -e "${GREEN}✓ 上传频率限制生效${NC}"
        test_results+=("✓ Test 4: Rate limiting active")
        passed_tests=$((passed_tests + 1))
    else
        echo -e "${RED}✗ 上传频率限制未生效${NC}"
        test_results+=("✗ Test 4: Rate limiting not active")
    fi
    
    # Test 5: Large file upload
    echo -e "\n${YELLOW}测试 5: 大文件上传限制${NC}"
    total_tests=$((total_tests + 1))
    
    dd if=/dev/zero of=/tmp/large_file.djvu bs=1M count=15 2>/dev/null
    response=$(curl -s -w "%{http_code}" -F "file=@/tmp/large_file.djvu" "$WAF_URL/uploads/user/" -o /dev/null)
    if [ "$response" = "403" ]; then
        echo -e "${GREEN}✓ 大文件上传已被阻止${NC}"
        test_results+=("✓ Test 5: Large file upload blocked")
        passed_tests=$((passed_tests + 1))
    else
        echo -e "${RED}✗ 大文件上传未被阻止 (HTTP $response)${NC}"
        test_results+=("✗ Test 5: Large file upload not blocked")
    fi
    
    # Test 6: Legitimate file upload
    echo -e "\n${YELLOW}测试 6: 合法文件上传${NC}"
    total_tests=$((total_tests + 1))
    
    echo "This is a legitimate text file" > /tmp/legitimate.txt
    response=$(curl -s -w "%{http_code}" -F "file=@/tmp/legitimate.txt" "$WAF_URL/api/v4/projects/1/uploads" -o /dev/null)
    if [ "$response" != "403" ]; then
        echo -e "${GREEN}✓ 合法文件上传正常${NC}"
        test_results+=("✓ Test 6: Legitimate file upload allowed")
        passed_tests=$((passed_tests + 1))
    else
        echo -e "${RED}✗ 合法文件上传被误阻止${NC}"
        test_results+=("✗ Test 6: Legitimate file upload blocked")
    fi
    
    # Display results
    echo -e "\n${CYAN}════════════════════════════════════════${NC}"
    echo -e "${CYAN}           测试结果汇总${NC}"
    echo -e "${CYAN}════════════════════════════════════════${NC}"
    
    for result in "${test_results[@]}"; do
        echo -e "$result"
    done
    
    echo -e "\n${CYAN}通过测试: ${GREEN}$passed_tests${CYAN}/$total_tests${NC}"
    
    local pass_rate=$((passed_tests * 100 / total_tests))
    if [ $pass_rate -ge 80 ]; then
        echo -e "${GREEN}✓ WAF 防护效果: 优秀 ($pass_rate%)${NC}"
    elif [ $pass_rate -ge 60 ]; then
        echo -e "${YELLOW}⚠ WAF 防护效果: 良好 ($pass_rate%)${NC}"
    else
        echo -e "${RED}✗ WAF 防护效果: 需要改进 ($pass_rate%)${NC}"
    fi
    
    # Cleanup
    rm -f /tmp/malicious.djvu /tmp/cmd_injection.djvu /tmp/fake_image.jpg /tmp/large_file.djvu /tmp/legitimate.txt
    
    # Generate test report
    generate_test_report "$passed_tests" "$total_tests" "${test_results[@]}"
}

generate_test_report() {
    local passed=$1
    local total=$2
    shift 2
    local results=("$@")
    
    local report_file="test_report_$(date +%Y%m%d_%H%M%S).html"
    
    cat > "$report_file" << HTML_EOF
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CVE-2021-22205 WAF 测试报告</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f9f9f9; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { text-align: center; margin-bottom: 30px; }
        .pass { color: #27ae60; }
        .fail { color: #e74c3c; }
        .summary { background: #ecf0f1; padding: 15px; border-radius: 5px; margin: 20px 0; }
        .test-item { margin: 10px 0; padding: 10px; border-left: 4px solid #3498db; background: #f8f9fa; }
        .pass-rate { font-size: 24px; font-weight: bold; text-align: center; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🛡️ CVE-2021-22205 WAF 测试报告</h1>
            <p>GitLab DjVu RCE 防护测试结果</p>
            <p>测试时间: $(date)</p>
        </div>
        
        <div class="summary">
            <div class="pass-rate">通过率: $((passed * 100 / total))%</div>
            <p>通过测试: $passed/$total</p>
        </div>
        
        <h2>详细测试结果</h2>
HTML_EOF

    for result in "${results[@]}"; do
        if [[ $result == *"✓"* ]]; then
            echo "<div class='test-item pass'>$result</div>" >> "$report_file"
        else
            echo "<div class='test-item fail'>$result</div>" >> "$report_file"
        fi
    done
    
    cat >> "$report_file" << HTML_EOF
        
        <h2>安全建议</h2>
        <ul>
            <li>定期更新 WAF 规则以应对新的攻击模式</li>
            <li>监控 WAF 日志以发现新的攻击尝试</li>
            <li>考虑实施更严格的文件上传限制</li>
            <li>定期进行安全测试以验证防护效果</li>
        </ul>
        
        <div class="summary">
            <p><strong>报告生成时间:</strong> $(date)</p>
            <p><strong>测试目标:</strong> CVE-2021-22205 (GitLab DjVu RCE)</p>
            <p><strong>WAF 版本:</strong> ModSecurity 2.9.3</p>
        </div>
    </div>
</body>
</html>
HTML_EOF
    
    log_success "测试报告已生成: $report_file"
}

# Run tests
test_djvu_protection
EOF

    chmod +x "$test_script"
    log_success "测试脚本已生成: $test_script"
}

# Generate cleanup script
generate_cleanup_script() {
    local cleanup_script="$PROJECT_DIR/cleanup.sh"
    
    log_info "生成清理脚本: $cleanup_script"
    
    cat > "$cleanup_script" << 'EOF'
#!/bin/bash

# CVE-2021-22205 GitLab WAF Protection Cleanup Script

source ../utils/common.sh

cleanup_cve_2021_22205() {
    show_banner "Cleaning up CVE-2021-22205 Protection"
    
    echo -e "${YELLOW}准备清理 GitLab CVE-2021-22205 WAF 防护环境...${NC}"
    
    if ! confirm_action "确定要清理所有相关容器和数据吗？"; then
        log_info "清理操作已取消"
        return 0
    fi
    
    # Stop and remove containers
    log_info "停止并删除容器..."
    docker-compose down -v 2>/dev/null || docker compose down -v 2>/dev/null
    
    # Remove containers by name if compose fails
    docker stop gitlab_vulnerable_cve22205 gitlab_waf_cve22205 2>/dev/null
    docker rm gitlab_vulnerable_cve22205 gitlab_waf_cve22205 2>/dev/null
    
    # Remove network
    docker network rm gitlab_cve22205_net 2>/dev/null
    
    # Remove images (optional)
    if confirm_action "是否删除相关 Docker 镜像？"; then
        docker rmi vulfocus/gitlab-cve_2021_22205:latest 2>/dev/null
        docker rmi owasp/modsecurity:apache 2>/dev/null
        log_info "Docker 镜像已删除"
    fi
    
    # Clean up volumes
    log_info "清理 Docker 卷..."
    docker volume prune -f
    
    # Remove temporary files
    log_info "清理临时文件..."
    rm -f /tmp/malicious.djvu /tmp/cmd_injection.djvu /tmp/fake_image.jpg
    rm -f /tmp/large_file.djvu /tmp/legitimate.txt
    
    log_success "CVE-2021-22205 防护环境清理完成！"
    
    echo -e "${CYAN}清理摘要:${NC}"
    echo -e "  ✓ 容器已停止并删除"
    echo -e "  ✓ 网络已删除"
    echo -e "  ✓ 临时文件已清理"
    echo -e "  ✓ 卷已清理"
    
    if confirm_action "是否删除项目目录？"; then
        cd ..
        rm -rf "$(basename "$(pwd)")"
        log_info "项目目录已删除"
    else
        log_info "项目目录保留，您可以手动删除"
    fi
}

# Run cleanup
cleanup_cve_2021_22205
EOF

    chmod +x "$cleanup_script"
    log_success "清理脚本已生成: $cleanup_script"
}

# Monitor WAF status
monitor_waf() {
    show_banner "CVE-2021-22205 WAF 状态监控"
    
    if ! docker ps | grep -q "$WAF_CONTAINER_NAME"; then
        log_error "WAF 容器未运行，请先部署防护"
        return 1
    fi
    
    echo -e "${CYAN}实时监控 WAF 状态... (按 Ctrl+C 退出)${NC}"
    
    while true; do
        clear
        echo -e "${GREEN}=== CVE-2021-22205 WAF 监控面板 ===${NC}"
        echo -e "更新时间: $(date)"
        echo ""
        
        # Container status
        echo -e "${YELLOW}容器状态:${NC}"
        docker ps --filter "name=$CONTAINER_NAME" --filter "name=$WAF_CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        echo ""
        
        # WAF logs (last 5 lines)
        echo -e "${YELLOW}最新 WAF 日志:${NC}"
        docker logs --tail 5 "$WAF_CONTAINER_NAME" 2>/dev/null | head -5
        echo ""
        
        # Resource usage
        echo -e "${YELLOW}资源使用:${NC}"
        docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}" "$CONTAINER_NAME" "$WAF_CONTAINER_NAME" 2>/dev/null
        echo ""
        
        echo -e "${CYAN}WAF 访问地址: http://localhost:$WAF_PORT${NC}"
        
        sleep 5
    done
}

# View WAF logs
view_logs() {
    show_banner "CVE-2021-22205 WAF 日志查看"
    
    if [ ! -d "$PROJECT_DIR" ]; then
        log_error "项目目录不存在，请先部署防护"
        return 1
    fi
    
    echo -e "${CYAN}选择要查看的日志:${NC}"
    echo -e "${WHITE}1.${NC} WAF 访问日志"
    echo -e "${WHITE}2.${NC} WAF 错误日志"
    echo -e "${WHITE}3.${NC} ModSecurity 审计日志"
    echo -e "${WHITE}4.${NC} ModSecurity 调试日志"
    echo -e "${WHITE}5.${NC} 容器日志"
    echo -e "${WHITE}0.${NC} 返回"
    
    read -p "请选择: " choice
    
    case $choice in
        1)
            log_info "显示 WAF 访问日志..."
            tail -f "$PROJECT_DIR/waf_logs/access.log" 2>/dev/null || log_error "日志文件不存在"
            ;;
        2)
            log_info "显示 WAF 错误日志..."
            tail -f "$PROJECT_DIR/waf_logs/error.log" 2>/dev/null || log_error "日志文件不存在"
            ;;
        3)
            log_info "显示 ModSecurity 审计日志..."
            tail -f "$PROJECT_DIR/waf_logs/modsec_audit.log" 2>/dev/null || log_error "日志文件不存在"
            ;;
        4)
            log_info "显示 ModSecurity 调试日志..."
            tail -f "$PROJECT_DIR/waf_logs/modsec_debug.log" 2>/dev/null || log_error "日志文件不存在"
            ;;
        5)
            log_info "显示容器日志..."
            echo -e "${YELLOW}GitLab 容器日志:${NC}"
            docker logs --tail 20 "$CONTAINER_NAME" 2>/dev/null
            echo -e "\n${YELLOW}WAF 容器日志:${NC}"
            docker logs --tail 20 "$WAF_CONTAINER_NAME" 2>/dev/null
            ;;
        0)
            return 0
            ;;
        *)
            log_error "无效选择"
            ;;
    esac
}

# Main execution
main() {
    while true; do
        show_main_menu
        read -p "请选择操作 (0-7): " choice
        
        case $choice in
            1)
                generate_deployment_script
                read -p "按 Enter 继续..."
                ;;
            2)
                cd "$PROJECT_DIR" 2>/dev/null && ./deploy.sh || log_error "请先生成部署脚本"
                read -p "按 Enter 继续..."
                ;;
            3)
                generate_test_script
                read -p "按 Enter 继续..."
                ;;
            4)
                monitor_waf
                ;;
            5)
                view_logs
                read -p "按 Enter 继续..."
                ;;
            6)
                generate_cleanup_script
                read -p "按 Enter 继续..."
                ;;
            7)
                cd "$PROJECT_DIR" 2>/dev/null && ./cleanup.sh || log_error "请先生成清理脚本"
                read -p "按 Enter 继续..."
                ;;
            0)
                log_info "退出程序"
                exit 0
                ;;
            *)
                log_error "无效选择，请重新输入"
                sleep 2
                ;;
        esac
    done
}

# Run main function
main
