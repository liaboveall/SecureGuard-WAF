#!/bin/bash

# =============================================================================
# CVE-2021-21389 (WordPress BuddyPress) WAF 防护部署脚本
# 自动化部署 ModSecurity WAF 来防护 BuddyPress 权限提升漏洞
# =============================================================================

# 脚本目录
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# 加载配置和工具函数
source "$PROJECT_ROOT/utils/common.sh"
load_config "$PROJECT_ROOT/config/global.conf"

# CVE 特定配置
CVE_ID="CVE-2021-21389"
CVE_DESCRIPTION="WordPress BuddyPress 权限提升漏洞"
WAF_RULE_ID_PREFIX="5000"

# 初始化环境
init_environment

# =============================================================================
# 主要功能函数
# =============================================================================

show_script_info() {
    print_header "CVE-2021-21389 BuddyPress WAF 防护部署"
    
    cat << EOF
${CYAN}漏洞信息:${NC}
  • CVE ID: $CVE_ID
  • 描述: $CVE_DESCRIPTION
  • 影响组件: WordPress BuddyPress Plugin
  • 目标端口: $WORDPRESS_HOST_PORT
  • WAF 端口: $WAF_HOST_PORT

${YELLOW}防护内容:${NC}
  • WordPress + BuddyPress 漏洞环境
  • ModSecurity WAF 防护层
  • REST API 权限检查规则
  • JSON 载荷深度检测

${RED}漏洞危险性:${NC}
  • 权限提升攻击
  • 未授权管理员访问
  • 用户角色篡改

EOF
}

# 创建 BuddyPress 防护规则
create_buddypress_protection_rules() {
    local rules_file="$CONFIG_DIR/buddypress-protection.conf"
    
    cat > "$rules_file" << EOF
# BuddyPress CVE-2021-21389 权限提升防护规则集
# 规则ID前缀: $WAF_RULE_ID_PREFIX

# 启用 JSON 请求体处理器
SecRule REQUEST_HEADERS:Content-Type "@rx ^application/(?:[a-zA-Z0-9.-]+\\+)?json" \\
    "id:${WAF_RULE_ID_PREFIX}0,\\
    phase:1,\\
    t:none,t:lowercase,\\
    pass,\\
    nolog,\\
    ctl:requestBodyProcessor=JSON"

# 规则 1: 检测对 BuddyPress members API 的可疑访问
SecRule REQUEST_URI "@streq /wp-json/buddypress/v1/members/me" \\
    "id:${WAF_RULE_ID_PREFIX}1,\\
    phase:2,\\
    t:none,t:lowercase,t:urlDecode,t:normalizePathWin,\\
    pass,\\
    chain,\\
    msg:'BuddyPress Members API Access Detected',\\
    tag:'BUDDYPRESS/API_ACCESS',\\
    severity:'INFO',\\
    setvar:'tx.buddypress_score=+1'"
    SecRule REQUEST_METHOD "@streq POST" \\
        "t:none"

# 规则 2: 核心防护 - 检测 roles 参数中的 administrator 值
SecRule REQUEST_URI "@streq /wp-json/buddypress/v1/members/me" \\
    "id:${WAF_RULE_ID_PREFIX}2,\\
    phase:2,\\
    t:none,t:lowercase,t:urlDecode,t:normalizePathWin,\\
    deny,\\
    status:403,\\
    chain,\\
    msg:'CVE-2021-21389: Attempt to set roles to administrator via BuddyPress API',\\
    tag:'BUDDYPRESS/PRIVILEGE_ESCALATION',\\
    severity:'CRITICAL',\\
    logdata:'Matched Data: %{MATCHED_VAR} found within %{MATCHED_VAR_NAME}'"
    SecRule REQUEST_METHOD "@streq POST" \\
        "t:none" \\
        "chain"
    SecRule ARGS:roles "@rx ^administrator\$" \\
        "t:none,t:lowercase,t:removeNulls,t:compressWhitespace"

# 规则 3: 检测其他高权限角色提升尝试
SecRule REQUEST_URI "@streq /wp-json/buddypress/v1/members/me" \\
    "id:${WAF_RULE_ID_PREFIX}3,\\
    phase:2,\\
    deny,\\
    status:403,\\
    chain,\\
    msg:'BuddyPress High Privilege Role Assignment Attempt',\\
    tag:'BUDDYPRESS/HIGH_PRIVILEGE_ROLE',\\
    severity:'HIGH'"
    SecRule REQUEST_METHOD "@streq POST" \\
        "t:none" \\
        "chain"
    SecRule ARGS:roles "@rx (?i)^(admin|administrator|super_admin|editor)\$" \\
        "t:none,t:removeNulls,t:compressWhitespace"

# 规则 4: 检测批量用户修改尝试
SecRule REQUEST_URI "@rx ^/wp-json/buddypress/v1/members/[0-9]+\$" \\
    "id:${WAF_RULE_ID_PREFIX}4,\\
    phase:2,\\
    pass,\\
    chain,\\
    msg:'BuddyPress Member Modification Attempt',\\
    tag:'BUDDYPRESS/MEMBER_MODIFICATION',\\
    severity:'WARNING',\\
    setvar:'tx.buddypress_score=+3'"
    SecRule REQUEST_METHOD "@streq POST" \\
        "t:none" \\
        "chain"
    SecRule ARGS:roles "@rx (?i)(admin|administrator|editor)" \\
        "deny,status:403"

# 规则 5: 检测 JSON 载荷中的角色提升
SecRule REQUEST_HEADERS:Content-Type "@rx application/json" \\
    "id:${WAF_RULE_ID_PREFIX}5,\\
    phase:2,\\
    pass,\\
    chain,\\
    msg:'JSON Role Escalation in Request Body',\\
    tag:'BUDDYPRESS/JSON_ROLE_ESCALATION',\\
    severity:'HIGH'"
    SecRule REQUEST_BODY "@rx \\\"roles\\\"\\s*:\\s*\\\"administrator\\\"" \\
        "deny,status:403"

# 规则 6: 检测编码绕过尝试
SecRule REQUEST_URI "@streq /wp-json/buddypress/v1/members/me" \\
    "id:${WAF_RULE_ID_PREFIX}6,\\
    phase:2,\\
    deny,\\
    status:403,\\
    chain,\\
    msg:'BuddyPress Encoding Bypass Attempt',\\
    tag:'BUDDYPRESS/ENCODING_BYPASS',\\
    severity:'HIGH'"
    SecRule ARGS:roles "@rx (?i)(%61%64%6d%69%6e|\\\\u0061\\\\u0064\\\\u006d\\\\u0069\\\\u006e)" \\
        "t:urlDecode,t:jsDecode"

# 规则 7: 检测用户能力 (capabilities) 修改
SecRule REQUEST_URI "@rx ^/wp-json/buddypress/v1/members/" \\
    "id:${WAF_RULE_ID_PREFIX}7,\\
    phase:2,\\
    deny,\\
    status:403,\\
    chain,\\
    msg:'BuddyPress User Capabilities Modification',\\
    tag:'BUDDYPRESS/CAPABILITY_MODIFICATION',\\
    severity:'HIGH'"
    SecRule ARGS "@rx (?i)(capabilities|user_level|allcaps)" \\
        "t:none"

# 规则 8: 速率限制 - 防止暴力攻击
SecRule REQUEST_URI "@rx ^/wp-json/buddypress/v1/members/" \\
    "id:${WAF_RULE_ID_PREFIX}8,\\
    phase:2,\\
    pass,\\
    nolog,\\
    setvar:'ip.buddypress_requests=+1',\\
    expirevar:'ip.buddypress_requests=60'"

SecRule IP:buddypress_requests "@gt 10" \\
    "id:${WAF_RULE_ID_PREFIX}9,\\
    phase:2,\\
    deny,\\
    status:429,\\
    msg:'Rate Limit Exceeded for BuddyPress API',\\
    tag:'BUDDYPRESS/RATE_LIMIT',\\
    severity:'WARNING'"

# 规则 10: 白名单 - 允许正常的用户资料更新
SecRule REQUEST_URI "@streq /wp-json/buddypress/v1/members/me" \\
    "id:${WAF_RULE_ID_PREFIX}10,\\
    phase:2,\\
    pass,\\
    chain,\\
    msg:'Normal Profile Update Allowed',\\
    tag:'BUDDYPRESS/NORMAL_UPDATE',\\
    severity:'INFO'"
    SecRule REQUEST_METHOD "@streq POST" \\
        "t:none" \\
        "chain"
    SecRule ARGS:roles "@rx ^(subscriber|contributor|author)\$" \\
        "t:none,t:lowercase"
EOF

    log_success "BuddyPress 防护规则已创建: $rules_file"
}

# 创建 WordPress WAF 配置
create_wordpress_waf_config() {
    local config_file="$CONFIG_DIR/wordpress-modsecurity.conf"
    
    cat > "$config_file" << EOF
# ModSecurity 配置 - WordPress BuddyPress 防护
SecRuleEngine $MODSEC_RULE_ENGINE

# 请求体处理
SecRequestBodyAccess On
SecRequestBodyLimit 13107200
SecRequestBodyNoFilesLimit 131072
SecRequestBodyInMemoryLimit 131072

# JSON 处理配置
SecRequestBodyLimitAction Reject
SecRequestBodyJsonDepthLimit 512
SecRequestBodyNoFilesLimit 131072

# 响应体处理
SecResponseBodyAccess On
SecResponseBodyMimeType text/plain text/html text/xml application/json application/javascript
SecResponseBodyLimit 524288

# 审计配置
SecAuditEngine RelevantOnly
SecAuditLog $MODSEC_AUDIT_LOG
SecAuditLogParts ABIJDEFHZ
SecAuditLogType Serial

# 临时目录配置
SecTmpDir /tmp/
SecDataDir /var/cache/modsecurity

# 默认动作
SecDefaultAction "phase:2,deny,log,status:403"

# 包含 BuddyPress 防护规则
Include /etc/modsecurity/rules.d/buddypress-protection.conf

# WordPress 基础防护
SecRule REQUEST_URI "@beginsWith /wp-admin/" \\
    "id:6001,\\
    phase:1,\\
    pass,\\
    nolog,\\
    setvar:'tx.wordpress_admin=1'"

SecRule REQUEST_URI "@beginsWith /wp-json/" \\
    "id:6002,\\
    phase:1,\\
    pass,\\
    nolog,\\
    setvar:'tx.wordpress_api=1'"
EOF

    log_success "WordPress ModSecurity 配置已创建: $config_file"
}

# 创建 Apache WordPress 配置
create_apache_wordpress_config() {
    local config_file="$CONFIG_DIR/apache-wordpress.conf"
    
    cat > "$config_file" << EOF
# Apache 虚拟主机配置 - WordPress BuddyPress WAF
<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html

    ErrorLog \${APACHE_LOG_DIR}/error.log
    CustomLog \${APACHE_LOG_DIR}/access.log combined

    # 代理配置
    ProxyRequests Off
    ProxyPreserveHost On
    ProxyTimeout 300
    
    # 代理到 WordPress 应用
    ProxyPass / http://$WORDPRESS_CONTAINER_NAME:80/
    ProxyPassReverse / http://$WORDPRESS_CONTAINER_NAME:80/
    
    # 设置代理头
    ProxyPassReverse / http://localhost:$WORDPRESS_HOST_PORT/

    # ModSecurity 配置
    <IfModule security2_module>
        SecAuditLog /var/log/apache2/wordpress_modsec_audit.log
        SecRuleEngine On
        
        # 增强 JSON 处理
        SecRequestBodyJsonDepthLimit 512
        SecRequestBodyInMemoryLimit 2097152
        
        # WordPress 特定配置
        SecRule REQUEST_URI "@beginsWith /wp-json/" \\
            "id:7001,\\
            phase:1,\\
            pass,\\
            nolog,\\
            ctl:requestBodyProcessor=JSON"
    </IfModule>

    # WordPress 安全头
    Header always set X-Content-Type-Options nosniff
    Header always set X-Frame-Options SAMEORIGIN
    Header always set X-XSS-Protection "1; mode=block"
    Header always set Referrer-Policy "strict-origin-when-cross-origin"
    
    # BuddyPress API 特殊处理
    <LocationMatch "^/wp-json/buddypress/">
        Header always set Cache-Control "no-cache, no-store, must-revalidate"
        Header always set Pragma "no-cache"
        Header always set Expires "0"
    </LocationMatch>
</VirtualHost>
EOF

    log_success "Apache WordPress 配置已创建: $config_file"
}

# 创建 Docker Compose 配置
create_docker_compose_wordpress() {
    local compose_file="$PROJECT_ROOT/docker-compose-wordpress.yml"
    
    cat > "$compose_file" << EOF
version: '3.8'

services:
  # WordPress BuddyPress 漏洞应用
  $WORDPRESS_CONTAINER_NAME:
    image: $WORDPRESS_IMAGE
    container_name: $WORDPRESS_CONTAINER_NAME
    restart: unless-stopped
    networks:
      - $DOCKER_NETWORK
    environment:
      - WORDPRESS_DB_HOST=mysql
      - WORDPRESS_DB_USER=wordpress
      - WORDPRESS_DB_PASSWORD=wordpress
      - WORDPRESS_DB_NAME=wordpress
    expose:
      - "80"
    depends_on:
      - mysql
    volumes:
      - wordpress_data:/var/www/html
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/wp-json/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MySQL 数据库
  mysql:
    image: mysql:5.7
    container_name: wordpress_mysql
    restart: unless-stopped
    networks:
      - $DOCKER_NETWORK
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=wordpress
      - MYSQL_USER=wordpress
      - MYSQL_PASSWORD=wordpress
    volumes:
      - mysql_data:/var/lib/mysql

  # ModSecurity WAF for WordPress
  ${WAF_CONTAINER_NAME}_wordpress:
    image: httpd:2.4-alpine
    container_name: ${WAF_CONTAINER_NAME}_wordpress
    restart: unless-stopped
    ports:
      - "$WAF_HOST_PORT:80"
    networks:
      - $DOCKER_NETWORK
    volumes:
      - ./config/apache-wordpress.conf:/usr/local/apache2/conf/extra/httpd-vhosts.conf:ro
      - ./config/wordpress-modsecurity.conf:/etc/modsecurity/modsecurity.conf:ro
      - ./config/buddypress-protection.conf:/etc/modsecurity/rules.d/buddypress-protection.conf:ro
      - $LOG_DIR:/var/log/apache2
      - $LOG_DIR/modsecurity:/var/log/modsecurity
    depends_on:
      $WORDPRESS_CONTAINER_NAME:
        condition: service_healthy
    environment:
      - APACHE_LOG_LEVEL=$APACHE_LOG_LEVEL
    command: >
      sh -c "
        # 安装必要的包
        apk add --no-cache curl &&
        
        # 下载并安装 ModSecurity
        apk add --no-cache --virtual .build-deps gcc musl-dev make &&
        apk add --no-cache libxml2-dev curl-dev apache2-mod-security &&
        
        # 配置 Apache
        echo 'LoadModule security2_module modules/mod_security2.so' >> /usr/local/apache2/conf/httpd.conf &&
        echo 'LoadModule proxy_module modules/mod_proxy.so' >> /usr/local/apache2/conf/httpd.conf &&
        echo 'LoadModule proxy_http_module modules/mod_proxy_http.so' >> /usr/local/apache2/conf/httpd.conf &&
        echo 'LoadModule headers_module modules/mod_headers.so' >> /usr/local/apache2/conf/httpd.conf &&
        echo 'Include conf/extra/httpd-vhosts.conf' >> /usr/local/apache2/conf/httpd.conf &&
        
        # 启动 Apache
        httpd-foreground
      "

  # WordPress 管理面板监控
  wordpress_monitor:
    image: nginx:alpine
    container_name: wordpress_monitor
    restart: unless-stopped
    ports:
      - "9091:80"
    networks:
      - $DOCKER_NETWORK
    volumes:
      - $LOG_DIR:/var/log/waf:ro
      - ./templates/wordpress-monitor.html:/usr/share/nginx/html/index.html:ro
    depends_on:
      - ${WAF_CONTAINER_NAME}_wordpress

volumes:
  wordpress_data:
  mysql_data:

networks:
  $DOCKER_NETWORK:
    external: true
EOF

    log_success "Docker Compose WordPress 配置已创建: $compose_file"
}

# =============================================================================
# 脚本生成函数
# =============================================================================

create_deployment_script_wordpress() {
    local deploy_script="$SCRIPT_DIR/deploy-wordpress-waf.sh"
    
    cat > "$deploy_script" << 'EOF'
#!/bin/bash

# WordPress BuddyPress WAF 部署脚本
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

source "$PROJECT_ROOT/utils/common.sh"
load_config "$PROJECT_ROOT/config/global.conf"

init_environment

print_header "部署 WordPress BuddyPress CVE-2021-21389 WAF 防护"

# 检查环境
if ! check_dependencies; then
    exit 1
fi

if ! check_docker_status; then
    exit 1
fi

# 创建网络
create_docker_network

# 端口检查
ports_to_check=("$WAF_HOST_PORT" "9091")
for port in "${ports_to_check[@]}"; do
    if ! check_port "$port"; then
        if ! ask_confirmation "端口 $port 被占用，是否继续?"; then
            exit 1
        fi
    fi
done

# 启动服务
log_info "启动 WordPress BuddyPress WAF 防护服务..."

# 显示启动进度
show_progress 1 5 "启动 MySQL 数据库"
docker-compose -f "$PROJECT_ROOT/docker-compose-wordpress.yml" up -d mysql

show_progress 2 5 "等待数据库就绪"
sleep 20

show_progress 3 5 "启动 WordPress 应用"
docker-compose -f "$PROJECT_ROOT/docker-compose-wordpress.yml" up -d $WORDPRESS_CONTAINER_NAME

show_progress 4 5 "启动 WAF 防护层"
wait_for_container "$WORDPRESS_CONTAINER_NAME"
docker-compose -f "$PROJECT_ROOT/docker-compose-wordpress.yml" up -d ${WAF_CONTAINER_NAME}_wordpress

show_progress 5 5 "启动监控服务"
docker-compose -f "$PROJECT_ROOT/docker-compose-wordpress.yml" up -d wordpress_monitor

# 健康检查
log_info "执行健康检查..."
sleep 30

containers=("mysql" "$WORDPRESS_CONTAINER_NAME" "${WAF_CONTAINER_NAME}_wordpress" "wordpress_monitor")
for container in "${containers[@]}"; do
    if container_running "$container"; then
        log_success "容器 $container 运行正常"
    else
        log_error "容器 $container 运行异常"
    fi
done

# 显示部署结果
cat << EOL

${GREEN}WordPress BuddyPress WAF 防护部署完成!${NC}

${CYAN}访问端点:${NC}
  • WAF 保护的 WordPress: http://localhost:$WAF_HOST_PORT
  • 监控面板: http://localhost:9091
  • WordPress 管理后台: http://localhost:$WAF_HOST_PORT/wp-admin/

${CYAN}默认登录信息:${NC}
  • 用户名: admin
  • 密码: admin (首次访问时设置)

${CYAN}BuddyPress API 端点:${NC}
  • 用户信息: http://localhost:$WAF_HOST_PORT/wp-json/buddypress/v1/members/me
  • 用户列表: http://localhost:$WAF_HOST_PORT/wp-json/buddypress/v1/members/

${CYAN}日志监控:${NC}
  • WAF 访问日志: $LOG_DIR/access.log
  • WAF 错误日志: $LOG_DIR/error.log
  • ModSecurity 审计: $LOG_DIR/modsecurity/wordpress_modsec_audit.log

${CYAN}测试命令:${NC}
  # CVE-2021-21389 测试 payload
  curl -X POST "http://localhost:$WAF_HOST_PORT/wp-json/buddypress/v1/members/me" \\
    -H "Content-Type: application/json" \\
    -d '{"roles": "administrator"}'

${YELLOW}重要提醒:${NC}
  1. 首次访问 WordPress 需要完成安装向导
  2. 安装并激活 BuddyPress 插件以测试漏洞
  3. 创建测试用户进行权限提升测试

EOL
EOF

    chmod +x "$deploy_script"
    log_success "WordPress 部署脚本已创建: $deploy_script"
}

create_test_script_wordpress() {
    local test_script="$SCRIPT_DIR/test-wordpress-waf.sh"
    
    cat > "$test_script" << 'EOF'
#!/bin/bash

# WordPress BuddyPress WAF 测试脚本
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

source "$PROJECT_ROOT/utils/common.sh"
load_config "$PROJECT_ROOT/config/global.conf"

init_environment

print_header "WordPress BuddyPress CVE-2021-21389 WAF 防护测试"

BASE_URL="http://localhost:$WAF_HOST_PORT"
API_ENDPOINT="$BASE_URL/wp-json/buddypress/v1/members/me"

# 测试函数
test_api_request() {
    local test_name="$1"
    local payload="$2"
    local expected_status="$3"
    local headers="$4"
    
    log_info "测试: $test_name"
    
    local response_code
    if [[ -n "$headers" ]]; then
        response_code=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST "$API_ENDPOINT" \
            -H "$headers" \
            --data-raw "$payload" 2>/dev/null)
    else
        response_code=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST "$API_ENDPOINT" \
            --data-raw "$payload" 2>/dev/null)
    fi
    
    if [[ "$response_code" == "$expected_status" ]]; then
        if [[ "$expected_status" == "403" ]]; then
            log_success "✓ 攻击已被拦截 (HTTP $response_code)"
        else
            log_success "✓ 请求处理正常 (HTTP $response_code)"
        fi
    else
        if [[ "$expected_status" == "403" ]]; then
            log_error "✗ 攻击未被拦截 (HTTP $response_code, 期望 403)"
        else
            log_error "✗ 请求异常 (HTTP $response_code, 期望 $expected_status)"
        fi
    fi
    echo
}

# 执行测试
log_info "开始 WordPress BuddyPress CVE-2021-21389 防护测试..."
echo

# 测试 1: 正常用户信息更新
test_api_request "正常用户角色更新 (subscriber)" \
    '{"roles": "subscriber"}' \
    "200" \
    "Content-Type: application/json"

# 测试 2: CVE-2021-21389 核心攻击
test_api_request "CVE-2021-21389 权限提升攻击" \
    '{"roles": "administrator"}' \
    "403" \
    "Content-Type: application/json"

# 测试 3: 其他高权限角色攻击
test_api_request "高权限角色提升 (editor)" \
    '{"roles": "editor"}' \
    "403" \
    "Content-Type: application/json"

# 测试 4: URL 编码绕过尝试
test_api_request "URL 编码绕过尝试" \
    'roles=%61%64%6d%69%6e%69%73%74%72%61%74%6f%72' \
    "403" \
    "Content-Type: application/x-www-form-urlencoded"

# 测试 5: Unicode 编码绕过
test_api_request "Unicode 编码绕过" \
    '{"roles": "\\u0061\\u0064\\u006d\\u0069\\u006e\\u0069\\u0073\\u0074\\u0072\\u0061\\u0074\\u006f\\u0072"}' \
    "403" \
    "Content-Type: application/json"

# 测试 6: 用户能力修改尝试
test_api_request "用户能力修改攻击" \
    '{"capabilities": {"administrator": true}}' \
    "403" \
    "Content-Type: application/json"

# 测试 7: 批量用户修改
API_BATCH="$BASE_URL/wp-json/buddypress/v1/members/1"
log_info "测试: 批量用户修改攻击"
response_code=$(curl -s -o /dev/null -w "%{http_code}" \
    -X POST "$API_BATCH" \
    -H "Content-Type: application/json" \
    --data-raw '{"roles": "administrator"}' 2>/dev/null)

if [[ "$response_code" == "403" ]]; then
    log_success "✓ 批量修改攻击已被拦截 (HTTP $response_code)"
else
    log_error "✗ 批量修改攻击未被拦截 (HTTP $response_code)"
fi
echo

# 测试 8: 速率限制测试
log_info "测试: API 速率限制"
attack_count=0
for i in {1..12}; do
    response_code=$(curl -s -o /dev/null -w "%{http_code}" \
        -X POST "$API_ENDPOINT" \
        -H "Content-Type: application/json" \
        --data-raw '{"roles": "administrator"}' 2>/dev/null)
    
    if [[ "$response_code" == "429" ]]; then
        attack_count=$((attack_count + 1))
    fi
    sleep 0.5
done

if [[ $attack_count -gt 0 ]]; then
    log_success "✓ 速率限制生效，拦截了 $attack_count 次请求"
else
    log_warning "! 速率限制未触发或配置较宽松"
fi
echo

# 日志分析
print_subheader "分析 WAF 日志"

local audit_log="$LOG_DIR/modsecurity/wordpress_modsec_audit.log"
if [[ -f "$audit_log" ]]; then
    log_info "最近的拦截记录:"
    tail -100 "$audit_log" | grep -A 5 -B 5 "id.*5000" | head -30 || log_info "暂无拦截记录"
    
    echo
    log_info "拦截统计:"
    grep -c "BUDDYPRESS/PRIVILEGE_ESCALATION" "$audit_log" 2>/dev/null | while read count; do
        log_info "权限提升攻击拦截: $count 次"
    done
else
    log_warning "审计日志文件不存在: $audit_log"
fi

# 检查 WordPress 状态
echo
log_info "检查 WordPress 状态:"
wp_status=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/" 2>/dev/null)
if [[ "$wp_status" == "200" ]]; then
    log_success "WordPress 主页访问正常"
else
    log_warning "WordPress 主页访问异常 (HTTP $wp_status)"
fi

wp_api_status=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/wp-json/" 2>/dev/null)
if [[ "$wp_api_status" == "200" ]]; then
    log_success "WordPress REST API 正常"
else
    log_warning "WordPress REST API 异常 (HTTP $wp_api_status)"
fi

echo
log_info "测试完成！查看完整日志: tail -f $audit_log"
EOF

    chmod +x "$test_script"
    log_success "WordPress 测试脚本已创建: $test_script"
}

create_wordpress_monitor_template() {
    local monitor_file="$TEMPLATE_DIR/wordpress-monitor.html"
    
    cat > "$monitor_file" << 'EOF'
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WordPress BuddyPress WAF 监控</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh; padding: 20px;
        }
        .container {
            max-width: 1400px; margin: 0 auto;
            background: rgba(255,255,255,0.95);
            border-radius: 15px; box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #21759b, #0073aa);
            color: white; padding: 30px; text-align: center;
        }
        .header h1 { margin-bottom: 10px; font-size: 2.5em; }
        .header p { opacity: 0.9; font-size: 1.1em; }
        .content { padding: 40px; }
        .alert {
            background: linear-gradient(135deg, #ff6b6b, #ee5a52);
            color: white; padding: 20px; border-radius: 10px;
            margin-bottom: 30px; text-align: center;
        }
        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
            gap: 25px; margin-bottom: 40px;
        }
        .status-card {
            background: white; border-radius: 10px; padding: 25px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            border-left: 5px solid #0073aa;
            transition: transform 0.3s ease;
        }
        .status-card:hover { transform: translateY(-5px); }
        .status-card h3 {
            color: #21759b; margin-bottom: 15px; font-size: 1.3em;
        }
        .status-indicator {
            display: inline-block; width: 12px; height: 12px;
            border-radius: 50%; margin-right: 8px;
        }
        .status-online { background-color: #27ae60; }
        .status-warning { background-color: #f39c12; }
        .status-error { background-color: #e74c3c; }
        .metric-value {
            font-size: 2em; font-weight: bold;
            color: #21759b; margin: 10px 0;
        }
        .attack-log {
            background: white; border-radius: 10px; padding: 25px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        .attack-log h3 {
            color: #21759b; margin-bottom: 20px; font-size: 1.3em;
        }
        .log-entry {
            padding: 12px; margin: 8px 0; border-radius: 5px;
            border-left: 4px solid #e74c3c;
            background: #fff5f5; font-family: monospace;
        }
        .log-entry.blocked { border-left-color: #e74c3c; }
        .log-entry.warning { border-left-color: #f39c12; background: #fff9e6; }
        .log-entry.info { border-left-color: #3498db; background: #e3f2fd; }
        .refresh-btn {
            background: linear-gradient(135deg, #0073aa, #005177);
            color: white; border: none; padding: 12px 25px;
            border-radius: 25px; cursor: pointer; font-size: 1em;
            margin-bottom: 20px; transition: all 0.3s ease;
        }
        .refresh-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 115, 170, 0.4);
        }
        .protection-rules {
            background: white; border-radius: 10px; padding: 25px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }
        .rule-item {
            padding: 10px; margin: 5px 0; border-radius: 5px;
            background: #f8f9fa; border-left: 3px solid #28a745;
        }
    </style>
    <script>
        function refreshPage() { location.reload(); }
        setInterval(refreshPage, 30000);
        
        // 模拟实时数据
        function updateMetrics() {
            document.getElementById('blocked-attacks').textContent = Math.floor(Math.random() * 50) + 10;
            document.getElementById('total-requests').textContent = Math.floor(Math.random() * 1000) + 500;
            document.getElementById('threat-score').textContent = (Math.random() * 10).toFixed(1);
        }
        
        window.onload = function() {
            updateMetrics();
            
            // 模拟服务状态
            const services = [
                {id: 'wordpress-status', name: 'WordPress 服务'},
                {id: 'waf-status', name: 'WAF 防护'},
                {id: 'buddypress-status', name: 'BuddyPress API'},
                {id: 'mysql-status', name: 'MySQL 数据库'}
            ];
            
            services.forEach(service => {
                const isOnline = Math.random() > 0.1;
                const element = document.getElementById(service.id);
                element.className = 'status-indicator ' + (isOnline ? 'status-online' : 'status-error');
                document.getElementById(service.id + '-text').textContent = 
                    service.name + (isOnline ? ' 运行正常' : ' 服务异常');
            });
        };
    </script>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🛡️ WordPress BuddyPress WAF 监控</h1>
            <p>CVE-2021-21389 权限提升漏洞防护监控面板</p>
        </div>
        
        <div class="content">
            <div class="alert">
                <h3>⚠️ 高危漏洞防护中</h3>
                <p>正在监控 WordPress BuddyPress 插件的权限提升攻击 (CVE-2021-21389)</p>
            </div>
            
            <div class="status-grid">
                <div class="status-card">
                    <h3>🔒 服务状态</h3>
                    <p><span id="wordpress-status" class="status-indicator status-online"></span><span id="wordpress-status-text">WordPress 服务运行正常</span></p>
                    <p><span id="waf-status" class="status-indicator status-online"></span><span id="waf-status-text">WAF 防护运行正常</span></p>
                    <p><span id="buddypress-status" class="status-indicator status-online"></span><span id="buddypress-status-text">BuddyPress API 运行正常</span></p>
                    <p><span id="mysql-status" class="status-indicator status-online"></span><span id="mysql-status-text">MySQL 数据库运行正常</span></p>
                </div>
                
                <div class="status-card">
                    <h3>📊 攻击统计</h3>
                    <div class="metric-value" id="blocked-attacks">23</div>
                    <p>已拦截权限提升攻击</p>
                    <small>过去24小时</small>
                </div>
                
                <div class="status-card">
                    <h3>🌐 流量统计</h3>
                    <div class="metric-value" id="total-requests">756</div>
                    <p>总请求数</p>
                    <small>BuddyPress API 调用</small>
                </div>
                
                <div class="status-card">
                    <h3>⚡ 威胁评分</h3>
                    <div class="metric-value" id="threat-score">7.2</div>
                    <p>当前威胁级别</p>
                    <small>10 为最高威胁</small>
                </div>
            </div>
            
            <div class="attack-log">
                <h3>🚨 最近攻击记录</h3>
                <button class="refresh-btn" onclick="refreshPage()">🔄 刷新数据</button>
                
                <div class="log-entry blocked">
                    [BLOCKED] CVE-2021-21389 权限提升攻击 - IP: 192.168.1.100 - 尝试设置 roles=administrator
                </div>
                <div class="log-entry blocked">
                    [BLOCKED] BuddyPress API 权限修改 - IP: 10.0.0.50 - 检测到 capabilities 参数滥用
                </div>
                <div class="log-entry warning">
                    [WARNING] 异常 API 访问频率 - IP: 172.16.0.25 - 触发速率限制
                </div>
                <div class="log-entry blocked">
                    [BLOCKED] 编码绕过尝试 - IP: 192.168.1.100 - URL编码的 administrator 角色
                </div>
                <div class="log-entry info">
                    [INFO] 正常用户角色更新 - IP: 192.168.1.200 - roles=subscriber
                </div>
            </div>
            
            <div class="protection-rules">
                <h3>🛡️ 激活的防护规则</h3>
                <div class="rule-item">
                    <strong>规则 5002:</strong> CVE-2021-21389 核心防护 - 检测 roles=administrator
                </div>
                <div class="rule-item">
                    <strong>规则 5003:</strong> 高权限角色检测 - 防止 admin/editor 角色提升
                </div>
                <div class="rule-item">
                    <strong>规则 5005:</strong> JSON 载荷检测 - 分析请求体中的角色修改
                </div>
                <div class="rule-item">
                    <strong>规则 5006:</strong> 编码绕过防护 - 检测 URL/Unicode 编码攻击
                </div>
                <div class="rule-item">
                    <strong>规则 5008-5009:</strong> 速率限制 - 防止暴力攻击和 API 滥用
                </div>
            </div>
        </div>
    </div>
</body>
</html>
EOF

    log_success "WordPress 监控面板模板已创建: $monitor_file"
}

# =============================================================================
# 主执行流程
# =============================================================================

main() {
    show_script_info
    
    if ! ask_confirmation "是否继续创建 $CVE_ID WordPress BuddyPress WAF 防护配置?"; then
        log_info "操作已取消"
        exit 0
    fi
    
    # 环境检查
    if ! check_dependencies; then
        exit 1
    fi
    
    if ! validate_config; then
        exit 1
    fi
    
    # 生成配置文件
    log_info "生成 WordPress BuddyPress WAF 防护配置..."
    
    show_progress 1 7 "创建 BuddyPress 防护规则"
    create_buddypress_protection_rules
    
    show_progress 2 7 "创建 WordPress ModSecurity 配置"
    create_wordpress_waf_config
    
    show_progress 3 7 "创建 Apache 配置"
    create_apache_wordpress_config
    
    show_progress 4 7 "创建 Docker Compose 配置"
    create_docker_compose_wordpress
    
    show_progress 5 7 "创建监控面板模板"
    create_wordpress_monitor_template
    
    show_progress 6 7 "生成部署脚本"
    create_deployment_script_wordpress
    
    show_progress 7 7 "生成测试脚本"
    create_test_script_wordpress
    
    print_header "WordPress BuddyPress WAF 配置生成完成"
    
    cat << EOF
${GREEN}$CVE_ID WordPress BuddyPress WAF 防护配置已生成!${NC}

${CYAN}生成的文件:${NC}
  📁 配置文件:
    • $CONFIG_DIR/buddypress-protection.conf (核心防护规则)
    • $CONFIG_DIR/wordpress-modsecurity.conf (ModSecurity 配置)
    • $CONFIG_DIR/apache-wordpress.conf (Apache 虚拟主机)
    • docker-compose-wordpress.yml (完整环境)

  📁 脚本文件:
    • $SCRIPT_DIR/deploy-wordpress-waf.sh (一键部署)
    • $SCRIPT_DIR/test-wordpress-waf.sh (安全测试)

  📁 模板文件:
    • $TEMPLATE_DIR/wordpress-monitor.html (实时监控面板)

${YELLOW}防护能力:${NC}
  🎯 CVE-2021-21389 核心防护 (roles=administrator 检测)
  🔒 多种角色提升攻击防护 (admin, editor, super_admin)
  🛡️ JSON 载荷深度分析
  🚫 编码绕过检测 (URL编码, Unicode编码)
  ⚡ API 速率限制和暴力攻击防护
  📊 实时监控和日志记录

${YELLOW}特色功能:${NC}
  💾 完整的 WordPress + MySQL 环境
  🔍 BuddyPress REST API 专项防护
  📈 实时攻击统计和威胁评分
  🎨 可视化监控面板

${YELLOW}下一步操作:${NC}
  1️⃣ 部署环境: ./scripts/deploy-wordpress-waf.sh
  2️⃣ 访问 WordPress: http://localhost:$WAF_HOST_PORT
  3️⃣ 监控面板: http://localhost:9091
  4️⃣ 安全测试: ./scripts/test-wordpress-waf.sh

EOF

    if ask_confirmation "是否立即部署 WordPress BuddyPress WAF 防护?"; then
        "$SCRIPT_DIR/deploy-wordpress-waf.sh"
    fi
}

# 执行主函数
main "$@"
